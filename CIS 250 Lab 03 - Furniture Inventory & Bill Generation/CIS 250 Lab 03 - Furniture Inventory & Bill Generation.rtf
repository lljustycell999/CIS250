{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 package cis.pkg250.lab.pkg03;\
\
import java.util.Scanner;\
import java.io.*;\
\
//  NAME:           Justyce Countryman\
//\
//  Due Date:       Friday February 25, 2022\
//\
//  Project Name:   Laboratory 03   \
//\
//  Program Description: This program will manage a furniture inventory and \
//  generate bills. The program is menu-driven with choices to add and \
//  delete products for sale, increase and decrease an existing product's \
//  quantity, start a customer bill, and quit the program. Furniture \
//  information that will be held by a sub-arrays of objects include item IDs, \
//  quantities, prices, and notes. When generating bills, customer information \
//  will be requested by the user and displayed on the bill. The bill will be \
//  able to hold one furniture item, but the quantity can be as much as the \
//  item is available. Basic input error handling is also included. Once the \
//  user chooses to quit, all of the changes to the inventory will be saved to \
//  the same file through an overwrite method.  \
// \
//  Project Number:  Project 03\
\
public class CIS250Lab03 \{\
\
    public static void main(String[] args) throws IOException \{\
 \
        Furniture [ ] theInventory;\
        int numProducts;\
        \
        //Manage Furniture Inventory\
        theInventory = new Furniture [5000];\
        \
        numProducts = LoadFurnitureInventory(theInventory);\
        numProducts = PerformEachTask(numProducts, theInventory);\
        SaveFurnitureInventory(numProducts, theInventory);\
        \
    \}\
    \
    public static int LoadFurnitureInventory(Furniture [ ] theInventory) \
            throws IOException \{\
        \
        int numProducts;\
        File furnitureInfo;\
        Scanner furnitureInfoSC;\
        String itemID;\
        int itemQuantityAvailable;\
        double itemPrice;\
        String itemNote;\
        \
        //Load Furniture Inventory\
        numProducts = 0;\
        furnitureInfo = new File("furnitureinventory.txt");\
        furnitureInfoSC = new Scanner(furnitureInfo);\
        while(numProducts < theInventory.length && furnitureInfoSC.hasNext( )) \{\
            \
            itemID = furnitureInfoSC.nextLine( ); //from file\
            itemQuantityAvailable = furnitureInfoSC.nextInt( ); \
                //from file\
            itemPrice = furnitureInfoSC.nextDouble( ); //from file\
            furnitureInfoSC.nextLine( );\
            itemNote = furnitureInfoSC.nextLine( ); //from file\
            \
            theInventory[numProducts] = new Furniture( );\
            \
            theInventory[numProducts].SetItemID(itemID);\
            theInventory[numProducts].SetItemQuantityAvailable(\
                itemQuantityAvailable);\
            theInventory[numProducts].SetItemPrice(itemPrice);\
            theInventory[numProducts].SetItemNote(itemNote);\
            numProducts++;\
            \
        \}\
        furnitureInfoSC.close( );\
        return numProducts;\
        \
    \}\
    \
    public static int PerformEachTask(int numProducts, Furniture [ ] \
        theInventory) \{\
       \
        char userChoice;\
       \
        //Perform Each Task\
        userChoice = 'Z';\
        while(userChoice != 'F') \{\
           \
            userChoice = GetChoice( );\
            numProducts = PerformChoice(userChoice, numProducts, theInventory);\
           \
        \}\
        return numProducts;\
       \
    \}\
    \
    public static char GetChoice( ) \{\
        \
        char userChoice;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Choice\
        userChoice = 'G';\
        while(userChoice != 'A' && userChoice != 'B' && userChoice != 'C' && \
            userChoice != 'D' && userChoice != 'E' && userChoice != 'F') \{\
            \
            System.out.print("What would you like to do: Add a product [A], "\
                + "Delete a product [B], Increase the quantity of a product "\
                    + "[C], Decrease the quantity of a product [D], Start a "\
                        + "customer bill [E], or Quit and save the furniture "\
                            + "inventory [F]?  "); //to user\
            userChoice = kbd.nextLine( ).toUpperCase( ).charAt(0); //from user\
            System.out.println( );\
            \
        \}\
        return userChoice;\
        \
    \}\
    \
    public static int PerformChoice(char userChoice, int numProducts, Furniture\
        [ ] theInventory) \{\
        \
        //Perform Choice\
        if(userChoice == 'A')\
            numProducts = AddProduct(numProducts, theInventory);\
        if(userChoice == 'B')\
            numProducts = DeleteProduct(numProducts, theInventory);\
        if(userChoice == 'C')\
            IncreaseQuantityOfAProduct(numProducts, theInventory);\
        if(userChoice == 'D')\
            DecreaseQuantityOfAProduct(numProducts, theInventory);\
        if(userChoice == 'E')\
            GenerateBill(numProducts, theInventory);\
        \
        return numProducts;\
        \
    \}\
    \
    public static int AddProduct(int numProducts, Furniture [ ] theInventory) \{\
        \
        String searchItemID;\
        int loc;\
        \
        //Add Product\
        if(numProducts < theInventory.length) \{\
             \
            searchItemID = GetItemID( );\
            loc = SearchForMatchingItemID(numProducts, searchItemID, \
                theInventory);\
            numProducts = AddNonmatchingProductInformation(numProducts, loc,  \
                searchItemID, theInventory);\
        \
        \}\
        if(numProducts >= theInventory.length)\
            System.out.println("The furniture inventory is full! You need "\
                + "to delete at least one item before you can add any more.");\
                    //to user\
                    \
        return numProducts;\
        \
    \}\
    \
    public static String GetItemID( ) \{\
        \
        String searchItemID;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Item ID\
        System.out.print("Enter item ID number:  "); //to user\
        searchItemID = kbd.nextLine( ); //from user\
        System.out.println( );\
        \
        return searchItemID;\
        \
    \}\
    \
    public static int SearchForMatchingItemID(int numProducts, \
        String searchItemID, Furniture [ ] theInventory) \{\
        \
        int loc;\
        \
        //Search for Matching Item ID\
        loc = 0;\
        while(loc < numProducts && searchItemID.compareToIgnoreCase(\
            theInventory[loc].GetItemID( )) != 0)\
            loc++;\
        \
        return loc;\
        \
    \}\
    \
    public static int AddNonmatchingProductInformation(int numProducts, int loc, \
        String searchItemID, Furniture [ ] theInventory) \{\
        \
        Scanner kbd = new Scanner(System.in);\
        \
        //Add Nonmatching Product Information\
        if(numProducts < theInventory.length) \{\
                       \
            if(loc < numProducts)\
                System.out.println("Item ID is already in use!"); //to user\
            if(loc >= numProducts) \{\
                \
                theInventory[numProducts] = new Furniture( );\
                \
                theInventory[numProducts].SetItemID(searchItemID);\
                theInventory[numProducts].SetItemQuantityAvailable(-1);\
                while(theInventory[numProducts].GetItemQuantityAvailable( ) < 0\
                    ) \{\
\
                    System.out.print("Enter VALID item quantity (No negative "\
                        + "item quantities are allowed):  "); //to user\
                    theInventory[numProducts].SetItemQuantityAvailable(\
                        kbd.nextInt( )); //from user\
\
                \}\
                theInventory[numProducts].SetItemPrice(-0.01);\
                while(theInventory[numProducts].GetItemPrice( ) < 0) \{\
\
                    System.out.print("Enter VALID item price (No negative item "\
                        + "prices are allowed):  "); //to user\
                    theInventory[numProducts].SetItemPrice(kbd.nextDouble( ));\
                        //from user\
\
                \}\
                kbd.nextLine( );\
                System.out.print("Enter item note:  "); //to user\
                theInventory[numProducts].SetItemNote(kbd.nextLine( )); \
                    //from user\
                System.out.println( );\
                System.out.print(theInventory[numProducts].GetItemNote( ) + " "\
                    + "have been added to the furniture inventory."); //to user\
                numProducts++;\
            \
            \}\
            \
        \}\
        System.out.println( );\
        return numProducts;\
    \
    \}\
    \
    public static int DeleteProduct(int numProducts, Furniture [ ] \
        theInventory) \{\
        \
        String searchItemID;\
        int loc;\
        \
        //Delete Product\
        searchItemID = GetItemID( );\
        loc = SearchForMatchingItemID(numProducts, searchItemID, theInventory);\
        numProducts = PerformDeletion(loc, numProducts, theInventory);\
        \
        return numProducts;\
        \
    \}\
    \
    public static int PerformDeletion(int loc, int numProducts, Furniture [ ] \
        theInventory) \{\
        \
        //Perform Deletion\
        if(loc >= numProducts)     \
            System.out.println("Item was not found. Try again!"); //to user  \
        if(loc < numProducts) \{\
                      \
            System.out.println(theInventory[loc].GetItemNote( ) + " have been "\
                + "deleted from the furniture inventory."); //to user\
            \
            theInventory[loc] = theInventory[numProducts - 1];\
            \
            theInventory[loc].SetItemID(theInventory[numProducts - 1].GetItemID\
                ( ));\
            theInventory[loc].SetItemQuantityAvailable(theInventory[\
                numProducts - 1].GetItemQuantityAvailable( ));\
            theInventory[loc].SetItemPrice(theInventory[numProducts - 1\
                ].GetItemPrice( ));\
            theInventory[loc].SetItemNote(theInventory[numProducts - 1\
                ].GetItemNote( ));\
            numProducts--;\
            \
        \}\
        return numProducts;\
        \
    \}\
    \
    public static void IncreaseQuantityOfAProduct(int numProducts, Furniture\
        [ ] theInventory) \{\
        \
        String searchItemID;\
        int loc;\
        \
        //Increase Quantity of a Product\
        searchItemID = GetItemID( );\
        loc = SearchForMatchingItemID(numProducts, searchItemID, theInventory);\
        GetItemQuantityToAdd(loc, numProducts, theInventory);\
        \
    \}\
    \
    public static void GetItemQuantityToAdd(int loc, int numProducts,\
        Furniture [ ] theInventory) \{\
        \
        int addItemQuantityAvailable;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Item Quantity to Add\
        if(loc >= numProducts)     \
            System.out.println("Item was not found. Try again!"); //to user    \
        if(loc < numProducts) \{\
    \
            addItemQuantityAvailable = -1;\
            while(addItemQuantityAvailable < 0) \{\
                \
                System.out.print("Enter the quantity you would like "\
                    + "to add to the current quantity of " + theInventory[loc\
                        ].GetItemNote( ) + " (Do not enter a negative quantity)"\
                            + ":  "); //to user\
                addItemQuantityAvailable = kbd.nextInt( ); //from user\
                System.out.println( );\
                \
            \}\
            theInventory[loc].SetItemQuantityAvailable(theInventory[loc\
                ].GetItemQuantityAvailable( ) + addItemQuantityAvailable);\
            System.out.print(addItemQuantityAvailable + " " + theInventory[loc\
                ].GetItemNote( ) + " has/have been added! Bringing its total "\
                    + "item quantity to " + theInventory[loc\
                        ].GetItemQuantityAvailable( )); //to user\
            System.out.println( );\
            \
        \}\
        \
    \}\
    \
    public static void DecreaseQuantityOfAProduct(int numProducts, Furniture \
        [ ] theInventory) \{\
        \
        String searchItemID;\
        int loc;\
        \
        //Decrease Quantity of a Product\
        searchItemID = GetItemID( );\
        loc = SearchForMatchingItemID(numProducts, searchItemID, theInventory);\
        GetItemQuantityToRemove(loc, numProducts, theInventory);\
       \
    \}\
    \
    public static void GetItemQuantityToRemove(int loc, int numProducts, \
        Furniture [ ] theInventory) \{\
        \
        int removeItemQuantityAvailable;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Item Quantity to Remove  \
        if(loc >= numProducts)     \
            System.out.println("Item was not found. Try again!"); //to user  \
        if(loc < numProducts) \{\
        \
            removeItemQuantityAvailable = -1;\
            while(removeItemQuantityAvailable < 0) \{\
                \
                System.out.print("Enter the quantity you would like to remove "\
                    + "from the current quantity of " + theInventory[loc\
                        ].GetItemNote( ) + " (Do not enter a negative quantity"\
                            + "):  "); //to user\
                removeItemQuantityAvailable = kbd.nextInt( ); //from user\
                System.out.println( );\
                \
            \}\
            if(theInventory[loc].GetItemQuantityAvailable( ) - \
                removeItemQuantityAvailable < 0)\
                System.out.println("Quantity to remove was not accepted since "\
                    + "it brings the quantity of that item down to a negative "\
                        + "number."); //to user\
            \
            if(theInventory[loc].GetItemQuantityAvailable( ) - \
                removeItemQuantityAvailable >= 0) \{\
                \
                theInventory[loc].SetItemQuantityAvailable(theInventory[loc\
                    ].GetItemQuantityAvailable( ) - removeItemQuantityAvailable\
                        ); \
                System.out.println(removeItemQuantityAvailable + " " + \
                    theInventory[loc].GetItemNote( ) + " has/have been removed!"\
                        + " Bringing its total item quantity to " + \
                            theInventory[loc].GetItemQuantityAvailable( )); \
                                //to user \
\
            \}\
             \
        \}\
        \
    \}\
    \
    public static void GenerateBill(int numProducts, Furniture [ ] theInventory\
        ) \{\
        \
        String customerName;\
        String customerAddress;\
        String customerCityStateZip;\
        String searchItemID;\
        int loc;\
        int itemQuantity;\
        double subtotal;\
        double tax;\
        double total;\
        \
        //Generate Bill\
        customerName = GetCustomerName( );\
        customerAddress = GetCustomerAddress( );\
        customerCityStateZip = GetCustomerCityStateZip( );\
        searchItemID = GetItemID( );\
        loc = SearchForMatchingItemID(numProducts, searchItemID, theInventory);\
        itemQuantity = GetItemQuantity(loc, numProducts, theInventory);\
        subtotal = CalculateSubtotal(itemQuantity, loc, numProducts, \
            theInventory);\
        tax = CalculateTax(subtotal);\
        total = CalculateTotal(subtotal, tax);\
        DisplayCustomerInformation(customerName, customerAddress, \
            customerCityStateZip);\
        DisplayFurnitureHeading( );\
        DisplayFurnitureSummary(itemQuantity, loc, numProducts, theInventory);\
        DisplayBillTotals(subtotal, tax, total);\
        \
    \}\
    \
    public static String GetCustomerName( ) \{\
        \
        String customerName;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Customer Name\
        System.out.print("Enter customer name:  "); //to user\
        customerName = kbd.nextLine( ); //from user\
        \
        return customerName;\
        \
    \}\
    \
    public static String GetCustomerAddress( ) \{\
        \
        String customerAddress;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Customer Address\
        System.out.print("Enter customer address:  "); //to user\
        customerAddress = kbd.nextLine( ); //from user\
        \
        return customerAddress;\
        \
    \}\
    \
    public static String GetCustomerCityStateZip( ) \{\
        \
        String customerCityStateZip;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Customer City, State, Zip\
        System.out.print("Enter the city, state, and zip code of the "\
            + "customer:  "); //to user\
        customerCityStateZip = kbd.nextLine( ); //from user\
        \
        return customerCityStateZip;\
        \
    \}\
    \
    public static int GetItemQuantity(int loc, int numProducts, Furniture [ ] \
        theInventory) \{\
        \
        int itemQuantity;\
        Scanner kbd = new Scanner(System.in);\
        \
        //Get Item Quantity\
        itemQuantity = 0;\
        if(loc < numProducts) \{\
              \
            itemQuantity = -1;\
            while(itemQuantity < 0 || itemQuantity > theInventory[loc\
                ].GetItemQuantityAvailable( )) \{\
                \
                System.out.print("Enter the quantity of " + theInventory[loc\
                    ].GetItemNote( ) + " that the customer wants (Do not enter "\
                        + "a negative quantity or a quantity that is more than "\
                            + "what is available):  "); //to user\
                itemQuantity = kbd.nextInt( ); //from user\
                System.out.println( );\
                \
            \}\
            \
        \}\
        return itemQuantity;\
        \
    \}\
    \
    public static double CalculateSubtotal(int itemQuantity, int loc, int \
        numProducts, Furniture [ ] theInventory) \{\
        \
        double subtotal;\
        \
        //Calculate Subtotal\
        subtotal = 0.00;\
        if(loc < numProducts)\
            subtotal = itemQuantity * theInventory[loc].GetItemPrice( );\
        \
        return subtotal;\
        \
    \}\
    \
    public static double CalculateTax(double subtotal) \{\
        \
        double tax;\
        \
        //Calculate Tax\
        tax = subtotal * 0.08;\
        \
        return tax;\
        \
    \}\
    \
    public static double CalculateTotal(double subtotal, double tax) \{\
        \
        double total;\
        \
        //Calculate Total\
        total = subtotal + tax;\
        \
        return total;\
        \
    \}\
    \
    public static void DisplayCustomerInformation(String customerName, \
        String customerAddress, String customerCityStateZip) \{\
        \
        //Display Customer Information\
        System.out.println("Customer Name: " + customerName); //to user\
        System.out.println("Customer Address: " + customerAddress); //to user\
        System.out.println("Customer City, State, and Zip Code: " + \
            customerCityStateZip); //to user\
        System.out.println( );\
        \
    \}\
    \
    public static void DisplayFurnitureHeading( ) \{\
        \
        //Display Furniture Heading\
        System.out.printf("%-20s%-30s%-30s%-1s\\n", "Item ID", \
            "Item Description", "Item Quantity Purchased", "Price Per Item"); \
                //to user\
        \
    \}\
    \
    public static void DisplayFurnitureSummary(int itemQuantity, int loc, int \
        numProducts, Furniture [ ] theInventory) \{\
        \
        //Display Furniture Summary\
        if(loc < numProducts)\
            System.out.printf("%-20s%-30s%-30d%-1.2f\\n", theInventory[loc\
                ].GetItemID( ), theInventory[loc].GetItemNote( ), itemQuantity,\
                    theInventory[loc].GetItemPrice( )); //to user\
        System.out.println( );\
        \
    \}\
    \
    public static void DisplayBillTotals(double subtotal, double tax, \
        double total) \{\
        \
        //Display Bill Totals\
        System.out.printf("%-1s%-1.2f\\n", "Subtotal: ", subtotal); //to user\
        System.out.printf("%-1s%-1.2f\\n", "Tax (8.0%): ", tax); //to user\
        System.out.printf("%-1s%-1.2f\\n", "Total: ", total); //to user\
        System.out.println( );\
        \
    \}\
    \
    public static void SaveFurnitureInventory(int numProducts, Furniture [ ] \
        theInventory) throws IOException \{\
        \
        PrintWriter saveFurnitureInfoPW;\
        \
        //Save Furniture Inventory\
        saveFurnitureInfoPW = new PrintWriter("furnitureinventory.txt");\
        for(int cnt = 0; cnt < numProducts; cnt++) \{\
            \
            saveFurnitureInfoPW.println(theInventory[cnt].GetItemID( )); \
                //to file\
            saveFurnitureInfoPW.println(theInventory[cnt\
                ].GetItemQuantityAvailable( )); //to file\
            saveFurnitureInfoPW.printf("%-1.2f\\n", theInventory[cnt\
                ].GetItemPrice( )); //to file\
            saveFurnitureInfoPW.println(theInventory[cnt].GetItemNote( )); \
                //to file\
            \
        \}\
        saveFurnitureInfoPW.close( );\
        \
    \}\
    \
\}}